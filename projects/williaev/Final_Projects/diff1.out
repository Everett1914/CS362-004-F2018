diff URLValidatorCorrect/src/DomainValidator.java URLValidatorInCorrect/src/DomainValidator.java
165c165
<             return isValidTld(groups[0]);
---
>             return !isValidTld(groups[0]);
diff URLValidatorCorrect/src/InetAddressValidator.java URLValidatorInCorrect/src/InetAddressValidator.java
68c68
<         return VALIDATOR;
---
>     	return VALIDATOR;
77,78c77
<         return isValidInet4Address(inetAddress) || isValidInet6Address(inetAddress);
<         
---
>        return isValidInet4Address(inetAddress) || isValidInet6Address(inetAddress);
89,90c88
< 
<         if (groups == null) {
---
>        if (groups == null) {
109c107
<                 return false;
---
>             		return false;
diff URLValidatorCorrect/src/UrlValidator.java URLValidatorInCorrect/src/UrlValidator.java
167c167,168
<     private static final String PATH_REGEX = "^(/[-\\w:@&?=+,.!/~*'%$_;\\(\\)]*)?$";
---
>     private static final String PATH_REGEX = "^(/[-\\w:@&?=+,.!*'%$_;\\(\\)]*)?$";
>     //private static final String PATH_REGEX = "^(/[-\\\\w:@&?=+,.!/~*'%$_;\\\\(\\\\)]*)?$"; //Corrected
192c193,195
<     private static final String[] DEFAULT_SCHEMES = {"http", "https", "ftp"}; // Must be lower-case
---
>    private static final String[] DEFAULT_SCHEMES = {"http", "https", "ftp"}; // Must be lower-case
> 
> 
274c277,278
<         } else {
---
>         } 
>         else {
280a285
>                 //System.out.println(allowedSchemes);  //for testing
307d311
< 
312d315
< 
313a317
> 
321c325,326
<         } else { // not file:
---
>         } 
>         else { // not file:
356c361
< 
---
>         
361d365
< 
363c367,369
<             return false;
---
>         	if(!allowedSchemes.contains(scheme.toLowerCase(Locale.ENGLISH))) {
>         		return false;
>         	}
365d370
< 
383d387
< 
387a392
>         
389,433c394,442
<         final String authorityASCII = DomainValidator.unicodeToASCII(authority);
< 
<         Matcher authorityMatcher = AUTHORITY_PATTERN.matcher(authorityASCII);
<         if (!authorityMatcher.matches()) {
<             return false;
<         }
< 
<         // We have to process IPV6 separately because that is parsed in a different group
<         String ipv6 = authorityMatcher.group(PARSE_AUTHORITY_IPV6);
<         if (ipv6 != null) {
<             InetAddressValidator inetAddressValidator = InetAddressValidator.getInstance();
<                 if (!inetAddressValidator.isValidInet6Address(ipv6)) {
<                     return false;
<                 }
<         } else {
<             String hostLocation = authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);
<             // check if authority is hostname or IP address:
<             // try a hostname first since that's much more likely
<             DomainValidator domainValidator = DomainValidator.getInstance(isOn(ALLOW_LOCAL_URLS));
<             if (!domainValidator.isValid(hostLocation)) {
<                 // try an IPv4 address
<                 InetAddressValidator inetAddressValidator = InetAddressValidator.getInstance();
<                 if (!inetAddressValidator.isValidInet4Address(hostLocation)) {
<                     // isn't IPv4, so the URL is invalid
<                     return false;
<                 }
<             }
<             String port = authorityMatcher.group(PARSE_AUTHORITY_PORT);
<             if (port != null && port.length() > 0) {
<                 try {
<                     int iPort = Integer.parseInt(port);
<                     if (iPort < 0 || iPort > MAX_UNSIGNED_16_BIT_INT) {
<                         return false;
<                     }
<                 } catch (NumberFormatException nfe) {
<                     return false; // this can happen for big numbers
<                 }
<             }
<         }
< 
<         String extra = authorityMatcher.group(PARSE_AUTHORITY_EXTRA);
<         if (extra != null && extra.trim().length() > 0){
<             return false;
<         }
< 
---
>         //try {
> 	        final String authorityASCII = DomainValidator.unicodeToASCII(authority);
> 	        Matcher authorityMatcher = AUTHORITY_PATTERN.matcher(authorityASCII);
> 	        if (!authorityMatcher.matches()) {
> 	            return false;
> 	        }
> 
> 	        // We have to process IPV6 separately because that is parsed in a different group
> 	        String ipv6 = authorityMatcher.group(PARSE_AUTHORITY_IPV6);
> 	        if (ipv6 != null) {
> 	            InetAddressValidator inetAddressValidator = InetAddressValidator.getInstance();
> 	                if (!inetAddressValidator.isValidInet6Address(ipv6)) {
> 	                    return false;
> 	                }
> 	        } 
> 	        else {
> 	            String hostLocation = authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);
> 	            // check if authority is hostname or IP address:
> 	            // try a hostname first since that's much more likely
> 	            DomainValidator domainValidator = DomainValidator.getInstance(isOn(ALLOW_LOCAL_URLS));
> 	            if (!domainValidator.isValid(hostLocation)) {
> 	                // try an IPv4 address
> 	                InetAddressValidator inetAddressValidator = InetAddressValidator.getInstance();
> 	                if (!inetAddressValidator.isValidInet4Address(hostLocation)) {
> 	                    // isn't IPv4, so the URL is invalid
> 	    	            //System.out.println(hostLocation);
> 	                    return false;
> 	                }
> 	            }
> 	            String port = authorityMatcher.group(PARSE_AUTHORITY_PORT);
> 	            if (port != null && port.length() > 0) {
> 	                try {
> 	                    int iPort = Integer.parseInt(port);
> 	                    if (iPort < 0 || iPort > MAX_UNSIGNED_16_BIT_INT) {
> 	                        return false;
> 	                    }
> 	                } catch (NumberFormatException nfe) {
> 	                    return false; // this can happen for big numbers
> 	                }
> 	            }
> 	        }
> 	        String extra = authorityMatcher.group(PARSE_AUTHORITY_EXTRA);
> 	        if (extra != null && extra.trim().length() > 0){
> 	            return false;
> 	        }
>        // }
>        // catch(Error e) {
>        // 	System.out.println("Error validating authority for " + authority);
>        // }
