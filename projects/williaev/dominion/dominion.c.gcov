        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 321 returned 100% blocks executed 100%
      321:    8:int compare(const void* a, const void* b) {
      321:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:   10:    return 1;
      320:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
       82:   12:    return -1;
      238:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 10 returned 100% blocks executed 88%
       10:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       10:   44:  SelectStream(1);
call    0 returned 100%
       10:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
       10:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       10:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      110:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1100:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       10:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
       10:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       10:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
       10:   89:      state->supplyCount[estate] = 8;
       10:   90:      state->supplyCount[duchy] = 8;
       10:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       10:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       10:  102:  state->supplyCount[silver] = 40;
       10:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      210:  106:  for (i = adventurer; i <= treasure_map; i++){       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
     1650:  107:      for (j = 0; j < 10; j++){           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
     1550:  108:    	  if (kingdomCards[j] == i){
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  109:	      //check if card is a 'Victory' Kingdom card
      100:  110:	         if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
       20:  111:		           if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       10:  112:		               state->supplyCount[i] = 8;
        -:  113:		           }
    #####:  114:		           else{ state->supplyCount[i] = 12; }
        -:  115:		       }
        -:  116:	         else{
       90:  117:		           state->supplyCount[i] = 10;
        -:  118:		       }
      100:  119:	         break;
        -:  120:	     }
        -:  121:	      else{    //card is not in the set choosen for the game
     1450:  122:	        state->supplyCount[i] = -1;
        -:  123:	      }
        -:  124:	     }
        -:  125:  }
        -:  126:
        -:  127:  ////////////////////////
        -:  128:  //supply intilization complete
        -:  129:
        -:  130:  //set player decks
       30:  131:  for (i = 0; i < numPlayers; i++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       20:  132:      state->deckCount[i] = 0;
       80:  133:      for (j = 0; j < 3; j++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       60:  134:    	  state->deck[i][j] = estate;
       60:  135:    	  state->deckCount[i]++;
        -:  136:    	}
      160:  137:      for (j = 3; j < 10; j++){
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
      140:  138:    	  state->deck[i][j] = copper;
      140:  139:    	  state->deckCount[i]++;
        -:  140:    	}
        -:  141:  }
        -:  142:
        -:  143:  //shuffle player decks
       30:  144:  for (i = 0; i < numPlayers; i++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       20:  145:      if ( shuffle(i, state) < 0 ){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  146:    	  return -1;
        -:  147:    	}
        -:  148:  }
        -:  149:
        -:  150:  //draw player hands
       30:  151:  for (i = 0; i < numPlayers; i++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  152:      //initialize hand size to zero
       20:  153:      state->handCount[i] = 0;
       20:  154:      state->discardCount[i] = 0;
        -:  155:      //draw 5 cards
        -:  156:      // for (j = 0; j < 5; j++)
        -:  157:      //	{
        -:  158:      //	  drawCard(i, state);
        -:  159:      //	}
        -:  160:  }
        -:  161:
        -:  162:  //set embargo tokens to 0 for all supply piles
      280:  163:  for (i = 0; i <= treasure_map; i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      270:  164:      state->embargoTokens[i] = 0;
        -:  165:  }
        -:  166:
        -:  167:  //initialize first player's turn
       10:  168:  state->outpostPlayed = 0;
       10:  169:  state->phase = 0;
       10:  170:  state->numActions = 1;
       10:  171:  state->numBuys = 1;
       10:  172:  state->playedCardCount = 0;
       10:  173:  state->whoseTurn = 0;
       10:  174:  state->handCount[state->whoseTurn] = 0;
        -:  175:  //int it; move to top
        -:  176:
        -:  177:  //Moved draw cards to here, only drawing at the start of a turn
       60:  178:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       50:  179:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  180:  }
        -:  181:
       10:  182:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  183:
       10:  184:  return 0;
        -:  185:}
        -:  186:
function shuffle called 26 returned 100% blocks executed 100%
       26:  187:int shuffle(int player, struct gameState *state) {
        -:  188:
        -:  189:
        -:  190:  int newDeck[MAX_DECK];
       26:  191:  int newDeckPos = 0;
        -:  192:  int card;
        -:  193:  int i;
        -:  194:
       26:  195:  if (state->deckCount[player] < 1)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
        4:  196:    return -1;
       22:  197:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  198:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  199:
      237:  200:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      215:  201:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      215:  202:    newDeck[newDeckPos] = state->deck[player][card];
      215:  203:    newDeckPos++;
      759:  204:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
      544:  205:      state->deck[player][i] = state->deck[player][i+1];
        -:  206:    }
      215:  207:    state->deckCount[player]--;
        -:  208:  }
      237:  209:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      215:  210:    state->deck[player][i] = newDeck[i];
      215:  211:    state->deckCount[player]++;
        -:  212:  }
        -:  213:
       22:  214:  return 0;
        -:  215:}
        -:  216:
function playCard called 0 returned 0% blocks executed 0%
    #####:  217:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  218:{
        -:  219:  int card;
    #####:  220:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  221:
        -:  222:  //check if it is the right phase
    #####:  223:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  224:    {
    #####:  225:      return -1;
        -:  226:    }
        -:  227:
        -:  228:  //check if player has enough actions
    #####:  229:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  230:    {
    #####:  231:      return -1;
        -:  232:    }
        -:  233:
        -:  234:  //get card played
    #####:  235:  card = handCard(handPos, state);
call    0 never executed
        -:  236:
        -:  237:  //check if selected card is an action
    #####:  238:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:
        -:  243:  //play card
    #####:  244:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:
        -:  249:  //reduce number of actions
    #####:  250:  state->numActions--;
        -:  251:
        -:  252:  //update coins (Treasure cards may be added with card draws)
    #####:  253:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  254:
    #####:  255:  return 0;
        -:  256:}
        -:  257:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  258:int buyCard(int supplyPos, struct gameState *state) {
        -:  259:  int who;
        -:  260:  if (DEBUG){
        -:  261:    printf("Entering buyCard...\n");
        -:  262:  }
        -:  263:
        -:  264:  // I don't know what to do about the phase thing.
        -:  265:
    #####:  266:  who = state->whoseTurn;
        -:  267:
    #####:  268:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  269:    if (DEBUG)
        -:  270:      printf("You do not have any buys left\n");
    #####:  271:    return -1;
    #####:  272:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  273:    if (DEBUG)
        -:  274:      printf("There are not any of that type of card left\n");
    #####:  275:    return -1;
    #####:  276:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  277:    if (DEBUG)
        -:  278:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  279:    return -1;
        -:  280:  } else {
    #####:  281:    state->phase=1;
        -:  282:    //state->supplyCount[supplyPos]--;
    #####:  283:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  284:
    #####:  285:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  286:    state->numBuys--;
        -:  287:    if (DEBUG)
        -:  288:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  289:  }
        -:  290:
        -:  291:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  292:  //state->discardCount[who]++;
        -:  293:
    #####:  294:  return 0;
        -:  295:}
        -:  296:
function numHandCards called 4 returned 100% blocks executed 100%
        4:  297:int numHandCards(struct gameState *state) {
        4:  298:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  299:}
        -:  300:
function handCard called 0 returned 0% blocks executed 0%
    #####:  301:int handCard(int handPos, struct gameState *state) {
    #####:  302:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  303:  return state->hand[currentPlayer][handPos];
        -:  304:}
        -:  305:
function supplyCount called 3 returned 100% blocks executed 100%
        3:  306:int supplyCount(int card, struct gameState *state) {
        3:  307:  return state->supplyCount[card];
        -:  308:}
        -:  309:
function fullDeckCount called 6 returned 100% blocks executed 100%
        6:  310:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  311:  int i;
        6:  312:  int count = 0;
        -:  313:
       66:  314:  for (i = 0; i < state->deckCount[player]; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       60:  315:      if (state->deck[player][i] == card) count++;
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  316:  }
        -:  317:
       66:  318:  for (i = 0; i < state->handCount[player]; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       60:  319:      if (state->hand[player][i] == card) count++;
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  320:  }
        -:  321:
       66:  322:  for (i = 0; i < state->discardCount[player]; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       60:  323:      if (state->discard[player][i] == card) count++;
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  324:  }
        -:  325:
        6:  326:  return count;
        -:  327:}
        -:  328:
function whoseTurn called 13 returned 100% blocks executed 100%
       13:  329:int whoseTurn(struct gameState *state) {
       13:  330:  return state->whoseTurn;
        -:  331:}
        -:  332:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  333:int endTurn(struct gameState *state) {
        -:  334:  int k;
        -:  335:  int i;
    #####:  336:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  337:
        -:  338:  //Discard hand
    #####:  339:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  340:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  341:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  342:  }
    #####:  343:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  344:
        -:  345:  //Code for determining the player
    #####:  346:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  347:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  348:  }
        -:  349:  else{
    #####:  350:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  351:  }
        -:  352:
    #####:  353:  state->outpostPlayed = 0;
    #####:  354:  state->phase = 0;
    #####:  355:  state->numActions = 1;
    #####:  356:  state->coins = 0;
    #####:  357:  state->numBuys = 1;
    #####:  358:  state->playedCardCount = 0;
    #####:  359:  state->handCount[state->whoseTurn] = 0;
        -:  360:
        -:  361:  //int k; move to top
        -:  362:  //Next player draws hand
    #####:  363:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  364:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  365:  }
        -:  366:
        -:  367:  //Update money
    #####:  368:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  369:
    #####:  370:  return 0;
        -:  371:}
        -:  372:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  373:int isGameOver(struct gameState *state) {
        -:  374:  int i;
        -:  375:  int j;
        -:  376:
        -:  377:  //if stack of Province cards is empty, the game ends
    #####:  378:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  379:    {
    #####:  380:      return 1;
        -:  381:    }
        -:  382:
        -:  383:  //if three supply pile are at 0, the game ends
    #####:  384:  j = 0;
    #####:  385:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  386:    {
    #####:  387:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  388:	{
    #####:  389:	  j++;
        -:  390:	}
        -:  391:    }
    #####:  392:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  393:    {
    #####:  394:      return 1;
        -:  395:    }
        -:  396:
    #####:  397:  return 0;
        -:  398:}
        -:  399:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  400:int scoreFor (int player, struct gameState *state) {
        -:  401:
        -:  402:  int i;
    #####:  403:  int score = 0;
        -:  404:  //score from hand
    #####:  405:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  406:    {
    #####:  407:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  408:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  409:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  410:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  411:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  412:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  413:    }
        -:  414:
        -:  415:  //score from discard
    #####:  416:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  417:    {
    #####:  418:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  419:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  420:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  421:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  422:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  423:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  424:    }
        -:  425:
        -:  426:  //score from deck
    #####:  427:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  428:    {
    #####:  429:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  435:    }
        -:  436:
    #####:  437:  return score;
        -:  438:}
        -:  439:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  440:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  441:  int i;
        -:  442:  int j;
        -:  443:  int highScore;
        -:  444:  int currentPlayer;
        -:  445:
        -:  446:  //get score for each player
    #####:  447:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
        -:  449:      //set unused player scores to -9999
    #####:  450:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  451:	{
    #####:  452:	  players[i] = -9999;
        -:  453:	}
        -:  454:      else
        -:  455:	{
    #####:  456:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  457:	}
        -:  458:    }
        -:  459:
        -:  460:  //find highest score
    #####:  461:  j = 0;
    #####:  462:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  463:    {
    #####:  464:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  465:	{
    #####:  466:	  j = i;
        -:  467:	}
        -:  468:    }
    #####:  469:  highScore = players[j];
        -:  470:
        -:  471:  //add 1 to players who had less turns
    #####:  472:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  473:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  474:    {
    #####:  475:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  476:	{
    #####:  477:	  players[i]++;
        -:  478:	}
        -:  479:    }
        -:  480:
        -:  481:  //find new highest score
    #####:  482:  j = 0;
    #####:  483:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  484:    {
    #####:  485:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  486:	{
    #####:  487:	  j = i;
        -:  488:	}
        -:  489:    }
    #####:  490:  highScore = players[j];
        -:  491:
        -:  492:  //set winners in array to 1 and rest to 0
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  494:    {
    #####:  495:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  496:	{
    #####:  497:	  players[i] = 1;
        -:  498:	}
        -:  499:      else
        -:  500:	{
    #####:  501:	  players[i] = 0;
        -:  502:	}
        -:  503:    }
        -:  504:
    #####:  505:  return 0;
        -:  506:}
        -:  507:
function drawCard called 79 returned 100% blocks executed 100%
       79:  508:int drawCard(int player, struct gameState *state){
        -:  509:  int count;
        -:  510:  int deckCounter;
       79:  511:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  512:
        -:  513:    //Step 1 Shuffle the discard pile back into a deck
        -:  514:    int i;
        -:  515:    //Move discard to deck
       14:  516:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
       10:  517:      state->deck[player][i] = state->discard[player][i];
       10:  518:      state->discard[player][i] = -1;
        -:  519:    }
        -:  520:
        4:  521:    state->deckCount[player] = state->discardCount[player];
        4:  522:    state->discardCount[player] = 0;//Reset discard
        -:  523:
        -:  524:    //Shufffle the deck
        4:  525:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  526:
        -:  527:    if (DEBUG){//Debug statements
        -:  528:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  529:    }
        -:  530:
        4:  531:    state->discardCount[player] = 0;
        -:  532:
        -:  533:    //Step 2 Draw Card
        4:  534:    count = state->handCount[player];//Get current player's hand count
        -:  535:
        -:  536:    if (DEBUG){//Debug statements
        -:  537:      printf("Current hand count: %d\n", count);
        -:  538:    }
        -:  539:
        4:  540:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  541:
        4:  542:    if (deckCounter == 0)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        3:  543:      return -1;
        -:  544:
        1:  545:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  546:    state->deckCount[player]--;
        1:  547:    state->handCount[player]++;//Increment hand count
        -:  548:  }
        -:  549:
        -:  550:  else{
       75:  551:    int count = state->handCount[player];//Get current hand count for player
        -:  552:    int deckCounter;
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
       75:  557:    deckCounter = state->deckCount[player];//Create holder for the deck count
       75:  558:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       75:  559:    state->deckCount[player]--;
       75:  560:    state->handCount[player]++;//Increment hand count
        -:  561:  }
        -:  562:
       76:  563:  return 0;
        -:  564:}
        -:  565:
function getCost called 16 returned 100% blocks executed 20%
       16:  566:int getCost(int cardNumber)
        -:  567:{
       16:  568:  switch( cardNumber )
branch  0 taken 0%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 44%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 19%
branch 26 taken 0%
branch 27 taken 13%
        -:  569:    {
    #####:  570:    case curse:
    #####:  571:      return 0;
        4:  572:    case estate:
        4:  573:      return 2;
    #####:  574:    case duchy:
    #####:  575:      return 5;
    #####:  576:    case province:
    #####:  577:      return 8;
        7:  578:    case copper:
        7:  579:      return 0;
    #####:  580:    case silver:
    #####:  581:      return 3;
    #####:  582:    case gold:
    #####:  583:      return 6;
    #####:  584:    case adventurer:
    #####:  585:      return 6;
    #####:  586:    case council_room:
    #####:  587:      return 5;
    #####:  588:    case feast:
    #####:  589:      return 4;
    #####:  590:    case gardens:
    #####:  591:      return 4;
    #####:  592:    case mine:
    #####:  593:      return 5;
    #####:  594:    case remodel:
    #####:  595:      return 4;
    #####:  596:    case smithy:
    #####:  597:      return 4;
    #####:  598:    case village:
    #####:  599:      return 3;
    #####:  600:    case baron:
    #####:  601:      return 4;
    #####:  602:    case great_hall:
    #####:  603:      return 3;
    #####:  604:    case minion:
    #####:  605:      return 5;
    #####:  606:    case steward:
    #####:  607:      return 3;
    #####:  608:    case tribute:
    #####:  609:      return 5;
    #####:  610:    case ambassador:
    #####:  611:      return 3;
    #####:  612:    case cutpurse:
    #####:  613:      return 4;
    #####:  614:    case embargo:
    #####:  615:      return 2;
    #####:  616:    case outpost:
    #####:  617:      return 5;
    #####:  618:    case salvager:
    #####:  619:      return 4;
        3:  620:    case sea_hag:
        3:  621:      return 4;
    #####:  622:    case treasure_map:
    #####:  623:      return 4;
        -:  624:    }
        -:  625:
        2:  626:  return -1;
        -:  627:}
        -:  628:
function adventurerCard called 1 returned 100% blocks executed 100%
        1:  629:int adventurerCard(int z, int drawntreasure, int currentPlayer, int temphand[], struct gameState *state){
        7:  630:  while(drawntreasure < 4){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        6:  631:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        1:  632:      shuffle(currentPlayer, state);
call    0 returned 100%
        -:  633:    }
        6:  634:    drawCard(currentPlayer, state);
call    0 returned 100%
        6:  635:    int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        6:  636:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        4:  637:    drawntreasure++;
        -:  638:    else{
        2:  639:      temphand[z]=cardDrawn;
        2:  640:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        2:  641:      z++;
        -:  642:    }
        -:  643:  }
        3:  644:  while(z-1>=0){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  645:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        2:  646:    z=z-1;
        -:  647:  }
        1:  648:  return 0;
        -:  649:}
        -:  650:
function smithyCard called 1 returned 100% blocks executed 100%
        1:  651:int smithyCard(int currentPlayer, struct gameState *state, int handPos){
        3:  652:  for (int i = 0; i < 2; i++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  653:     drawCard(currentPlayer, state);
call    0 returned 100%
        -:  654:  }
        -:  655:
        1:  656:  return 0;
        -:  657:}
        -:  658:
function villageCard called 0 returned 0% blocks executed 0%
    #####:  659:int villageCard(int currentPlayer, struct gameState *state, int handPos){
        -:  660:  //+1 Card
    #####:  661:  drawCard(currentPlayer, state);
call    0 never executed
        -:  662:
        -:  663:  //+2 Actions
    #####:  664:  state->numActions = state->numActions + 2;
        -:  665:
        -:  666:  //discard played card from hand
    #####:  667:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  668:  return 0;
        -:  669:}
        -:  670:
function stewardCard called 0 returned 0% blocks executed 0%
    #####:  671:int stewardCard(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3){
    #####:  672:  if (choice1 == 1){
branch  0 never executed
branch  1 never executed
        -:  673:    //+2 cards
    #####:  674:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  675:    drawCard(currentPlayer, state);
call    0 never executed
        -:  676:  }
    #####:  677:  else if (choice1 == 1){
branch  0 never executed
branch  1 never executed
        -:  678:    //+2 coins
    #####:  679:    state->coins = state->coins + 2;
        -:  680:  }
        -:  681:  else{
        -:  682:    //trash 2 cards in hand
    #####:  683:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  684:    discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  685:  }
        -:  686:
        -:  687:  //discard card from hand
    #####:  688:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  689:  return 0;
        -:  690:}
        -:  691:
function cutpurseCard called 0 returned 0% blocks executed 0%
    #####:  692:int cutpurseCard(int currentPlayer, struct gameState *state, int handPos){
    #####:  693:  updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  694:  for (int i = 0; i <= state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  695:     if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  696:        for (int j = 0; j <= state->handCount[i]; j++){
branch  0 never executed
branch  1 never executed
    #####:  697:            if (state->hand[i][j] == copper){
branch  0 never executed
branch  1 never executed
    #####:  698:                discardCard(j, i, state, 0);
call    0 never executed
    #####:  699:                break;
        -:  700:            }
    #####:  701:            if (j == state->handCount[i]){
branch  0 never executed
branch  1 never executed
    #####:  702:                for (int k = 0; k < state->handCount[i]; k++){
branch  0 never executed
branch  1 never executed
        -:  703:                     if (DEBUG)
        -:  704:                        printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  705:                }
    #####:  706:                break;
        -:  707:            }
        -:  708:       }
        -:  709:     }
        -:  710:   }
        -:  711:  //discard played card from hand
    #####:  712:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  713:  return 0;
        -:  714:}
        -:  715:
function cardEffect called 9 returned 100% blocks executed 12%
        9:  716:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  717:  int i;
        -:  718:  int j;
        -:  719:  int x;
        -:  720:  int index;
        9:  721:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        9:  722:  int nextPlayer = currentPlayer + 1;
        -:  723:
        9:  724:  int tributeRevealedCards[2] = {-1, -1};
        -:  725:  int temphand[MAX_HAND];// moved above the if statement
        9:  726:  int drawntreasure=0;
        9:  727:  int z = 0;// this is the counter for the temp hand
        9:  728:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  729:    nextPlayer = 0;
        -:  730:  }
        -:  731:
        -:  732:
        -:  733:  //uses switch to select card and perform actions
        9:  734:  switch( card ){
branch  0 taken 11%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 67%
branch  6 taken 11%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 11%
branch 19 taken 0%
branch 20 taken 0%
        1:  735:    case adventurer:
        1:  736:      adventurerCard(z, drawntreasure, currentPlayer, temphand, state);
call    0 returned 100%
        1:  737:    return 0;
        -:  738:
    #####:  739:    case council_room:
        -:  740:      //+4 Cards
    #####:  741:      for (i = 0; i < 4; i++){
branch  0 never executed
branch  1 never executed
    #####:  742:	       drawCard(currentPlayer, state);
call    0 never executed
        -:  743:	    }
        -:  744:
        -:  745:      //+1 Buy
    #####:  746:      state->numBuys++;
        -:  747:
        -:  748:      //Each other player draws a card
    #####:  749:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  750:	       if ( i != currentPlayer ){
branch  0 never executed
branch  1 never executed
    #####:  751:	          drawCard(i, state);
call    0 never executed
        -:  752:	       }
        -:  753:	    }
        -:  754:
        -:  755:      //put played card in played card pile
    #####:  756:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  757:      return 0;
        -:  758:
    #####:  759:    case feast:
        -:  760:      //gain card with cost up to 5
        -:  761:      //Backup hand
    #####:  762:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  763:      	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  764:      	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  765:      }
        -:  766:      //Backup hand
        -:  767:
        -:  768:      //Update Coins for Buy
    #####:  769:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  770:      x = 1;//Condition to loop on
    #####:  771:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  772:	       if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  773:	          if (DEBUG)
        -:  774:	           printf("None of that card left, sorry!\n");
        -:  775:
        -:  776:	            if (DEBUG){
        -:  777:	               printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  778:	            }
        -:  779:	       }
    #####:  780:	       else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  781:	         printf("That card is too expensive!\n");
call    0 never executed
        -:  782:
        -:  783:	          if (DEBUG){
        -:  784:	             printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  785:	          }
        -:  786:	       }
        -:  787:	       else{
        -:  788:
        -:  789:	          if (DEBUG){
        -:  790:	             printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  791:	          }
        -:  792:
    #####:  793:	          gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  794:	          x = 0;//No more buying cards
        -:  795:
        -:  796:	          if (DEBUG){
        -:  797:	            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  798:	          }
        -:  799:	       }
        -:  800:      }
        -:  801:
        -:  802:      //Reset Hand
    #####:  803:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  804:      	state->hand[currentPlayer][i] = temphand[i];
    #####:  805:      	temphand[i] = -1;
        -:  806:      }
        -:  807:      //Reset Hand
        -:  808:
    #####:  809:      return 0;
        -:  810:
    #####:  811:    case gardens:
    #####:  812:      return -1;
        -:  813:
    #####:  814:    case mine:
    #####:  815:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  816:
    #####:  817:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  818:        return -1;
        -:  819:	     }
        -:  820:
    #####:  821:      if (choice2 > treasure_map || choice2 < curse){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  822:        return -1;
        -:  823:	     }
        -:  824:
    #####:  825:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ){
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  826:        return -1;
        -:  827:	    }
        -:  828:
    #####:  829:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  830:
        -:  831:      //discard card from hand
    #####:  832:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  833:
        -:  834:      //discard trashed card
    #####:  835:      for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  836:	       if (state->hand[currentPlayer][i] == j){
branch  0 never executed
branch  1 never executed
    #####:  837:	          discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  838:	          break;
        -:  839:         }
        -:  840:      }
    #####:  841:      return 0;
        -:  842:
        6:  843:    case remodel:
        6:  844:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  845:
        6:  846:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        3:  847:	       return -1;
        -:  848:      }
        -:  849:
        3:  850:      gainCard(choice2, state, 0, currentPlayer);
call    0 returned 100%
        -:  851:
        -:  852:      //discard card from hand
        3:  853:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  854:
        -:  855:      //discard trashed card
       3*:  856:      for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  857:        if (state->hand[currentPlayer][i] == j){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  858:  	      discardCard(i, currentPlayer, state, 0);
call    0 returned 100%
        2:  859:  	      break;
        -:  860:	      }
        -:  861:      }
        -:  862:
        3:  863:      return 0;
        -:  864:
        1:  865:    case smithy:
        1:  866:      smithyCard(currentPlayer, state, handPos);
call    0 returned 100%
        1:  867:      return 0;
        -:  868:
    #####:  869:    case village:
    #####:  870:      villageCard(currentPlayer, state, handPos);
call    0 never executed
    #####:  871:      return 0;
        -:  872:
    #####:  873:    case baron:
    #####:  874:      state->numBuys++;//Increase buys by 1!
    #####:  875:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  876:      	int p = 0;//Iterator for hand!
    #####:  877:      	int card_not_discarded = 1;//Flag for discard set!
    #####:  878:      	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  879:	         if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  880:      	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  881:      	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  882:      	    state->discardCount[currentPlayer]++;
    #####:  883:	           for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  884:	              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  885:	           }
    #####:  886:        	   state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  887:        	   state->handCount[currentPlayer]--;
    #####:  888:      	     card_not_discarded = 0;//Exit the loop
        -:  889:	        }
    #####:  890:	        else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  891:	           if(DEBUG) {
        -:  892:      	      printf("No estate cards in your hand, invalid choice\n");
        -:  893:      	      printf("Must gain an estate if there are any\n");
        -:  894:	           }
    #####:  895:    	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  896:    	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  897:    	      state->supplyCount[estate]--;//Decrement estates
    #####:  898:    	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  899:          		isGameOver(state);
call    0 never executed
        -:  900:    	      }
        -:  901:	         }
    #####:  902:	       card_not_discarded = 0;//Exit the loop
        -:  903:	     }
        -:  904:
        -:  905:  	  else{
    #####:  906:  	    p++;//Next card
        -:  907:  	  }
        -:  908:	   }
        -:  909:    }
        -:  910:
        -:  911:      else{
    #####:  912:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  913:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  914:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  915:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  916:	    isGameOver(state);
call    0 never executed
        -:  917:	  }
        -:  918:	}
        -:  919:}
        -:  920:
        -:  921:
    #####:  922:      return 0;
        -:  923:
    #####:  924:    case great_hall:
        -:  925:      //+1 Card
    #####:  926:      drawCard(currentPlayer, state);
call    0 never executed
        -:  927:
        -:  928:      //+1 Actions
    #####:  929:      state->numActions++;
        -:  930:
        -:  931:      //discard card from hand
    #####:  932:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  933:      return 0;
        -:  934:
    #####:  935:    case minion:
        -:  936:      //+1 action
    #####:  937:      state->numActions++;
        -:  938:
        -:  939:      //discard card from hand
    #####:  940:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  941:
    #####:  942:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  943:	{
    #####:  944:	  state->coins = state->coins + 2;
        -:  945:	}
        -:  946:
    #####:  947:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  948:	{
        -:  949:	  //discard hand
    #####:  950:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  951:	    {
    #####:  952:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  953:	    }
        -:  954:
        -:  955:	  //draw 4
    #####:  956:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  957:	    {
    #####:  958:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  959:	    }
        -:  960:
        -:  961:	  //other players discard hand and redraw if hand size > 4
    #####:  962:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  963:	    {
    #####:  964:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  965:		{
    #####:  966:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  967:		    {
        -:  968:		      //discard hand
    #####:  969:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  970:			{
    #####:  971:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  972:			}
        -:  973:
        -:  974:		      //draw 4
    #####:  975:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  976:			{
    #####:  977:			  drawCard(i, state);
call    0 never executed
        -:  978:			}
        -:  979:		    }
        -:  980:		}
        -:  981:	    }
        -:  982:
        -:  983:	}
    #####:  984:      return 0;
        -:  985:
    #####:  986:    case steward:
    #####:  987:      stewardCard(currentPlayer, state, handPos, choice1, choice2, choice3);
call    0 never executed
    #####:  988:      return 0;
        -:  989:
    #####:  990:    case tribute:
    #####:  991:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  992:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  993:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  994:	  state->deckCount[nextPlayer]--;
        -:  995:	}
    #####:  996:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  997:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  998:	  state->discardCount[nextPlayer]--;
        -:  999:	}
        -: 1000:	else{
        -: 1001:	  //No Card to Reveal
        -: 1002:	  if (DEBUG){
        -: 1003:	    printf("No cards to reveal\n");
        -: 1004:	  }
        -: 1005:	}
        -: 1006:      }
        -: 1007:
        -: 1008:      else{
    #####: 1009:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1010:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1011:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1012:	    state->deckCount[nextPlayer]++;
    #####: 1013:	    state->discard[nextPlayer][i] = -1;
    #####: 1014:	    state->discardCount[nextPlayer]--;
        -: 1015:	  }
        -: 1016:
    #####: 1017:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1018:	}
    #####: 1019:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1020:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1021:	state->deckCount[nextPlayer]--;
    #####: 1022:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1024:	state->deckCount[nextPlayer]--;
        -: 1025:      }
        -: 1026:
    #####: 1027:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1028:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1029:	state->playedCardCount++;
    #####: 1030:	tributeRevealedCards[1] = -1;
        -: 1031:      }
        -: 1032:
    #####: 1033:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1034:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1035:	  state->coins += 2;
        -: 1036:	}
        -: 1037:
    #####: 1038:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1039:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1040:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1041:	}
        -: 1042:	else{//Action Card
    #####: 1043:	  state->numActions = state->numActions + 2;
        -: 1044:	}
        -: 1045:      }
        -: 1046:
    #####: 1047:      return 0;
        -: 1048:
    #####: 1049:    case ambassador:
    #####: 1050:      j = 0;		//used to check if player has enough cards to discard
        -: 1051:
    #####: 1052:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1053:	{
    #####: 1054:	  return -1;
        -: 1055:	}
        -: 1056:
    #####: 1057:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1058:	{
    #####: 1059:	  return -1;
        -: 1060:	}
        -: 1061:
    #####: 1062:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1063:	{
    #####: 1064:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1065:	    {
    #####: 1066:	      j++;
        -: 1067:	    }
        -: 1068:	}
    #####: 1069:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1070:	{
    #####: 1071:	  return -1;
        -: 1072:	}
        -: 1073:
        -: 1074:      if (DEBUG)
        -: 1075:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1076:
        -: 1077:      //increase supply count for choosen card by amount being discarded
    #####: 1078:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1079:
        -: 1080:      //each other player gains a copy of revealed card
    #####: 1081:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1082:	{
    #####: 1083:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1084:	    {
    #####: 1085:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1086:	    }
        -: 1087:	}
        -: 1088:
        -: 1089:      //discard played card from hand
    #####: 1090:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1091:
        -: 1092:      //trash copies of cards returned to supply
    #####: 1093:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1094:	{
    #####: 1095:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1096:	    {
    #####: 1097:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1098:		{
    #####: 1099:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1100:		  break;
        -: 1101:		}
        -: 1102:	    }
        -: 1103:	}
        -: 1104:
    #####: 1105:      return 0;
        -: 1106:
    #####: 1107:    case cutpurse:
    #####: 1108:      cutpurseCard(currentPlayer, state, handPos);
call    0 never executed
    #####: 1109:      return 0;
        -: 1110:
    #####: 1111:    case embargo:
        -: 1112:      //+2 Coins
    #####: 1113:      state->coins = state->coins + 2;
        -: 1114:
        -: 1115:      //see if selected pile is in play
    #####: 1116:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  return -1;
        -: 1119:	}
        -: 1120:
        -: 1121:      //add embargo token to selected supply pile
    #####: 1122:      state->embargoTokens[choice1]++;
        -: 1123:
        -: 1124:      //trash card
    #####: 1125:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1126:      return 0;
        -: 1127:
    #####: 1128:    case outpost:
        -: 1129:      //set outpost flag
    #####: 1130:      state->outpostPlayed++;
        -: 1131:
        -: 1132:      //discard card
    #####: 1133:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1134:      return 0;
        -: 1135:
    #####: 1136:    case salvager:
        -: 1137:      //+1 buy
    #####: 1138:      state->numBuys++;
        -: 1139:
    #####: 1140:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
        -: 1142:	  //gain coins equal to trashed card
    #####: 1143:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1144:	  //trash card
    #####: 1145:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1146:	}
        -: 1147:
        -: 1148:      //discard card
    #####: 1149:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1150:      return 0;
        -: 1151:
        1: 1152:    case sea_hag:
        3: 1153:      for (i = 0; i < state->numPlayers; i++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2: 1154:	       if (i != currentPlayer){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1: 1155:      	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        1: 1156:          state->deckCount[i]--;
        1: 1157:      	  state->discardCount[i]++;
        1: 1158:      	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1159:	       }
        -: 1160:      }
        1: 1161:      return 0;
        -: 1162:
    #####: 1163:    case treasure_map:
        -: 1164:      //search hand for another treasure_map
    #####: 1165:      index = -1;
    #####: 1166:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1167:	{
    #####: 1168:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1169:	    {
    #####: 1170:	      index = i;
    #####: 1171:	      break;
        -: 1172:	    }
        -: 1173:	}
    #####: 1174:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1175:	{
        -: 1176:	  //trash both treasure cards
    #####: 1177:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1178:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1179:
        -: 1180:	  //gain 4 Gold cards
    #####: 1181:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1182:	    {
    #####: 1183:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1184:	    }
        -: 1185:
        -: 1186:	  //return success
    #####: 1187:	  return 1;
        -: 1188:	}
        -: 1189:
        -: 1190:      //no second treasure_map found in hand
    #####: 1191:      return -1;
        -: 1192:    }
        -: 1193:
    #####: 1194:  return -1;
        -: 1195:}
        -: 1196:
function discardCard called 5 returned 100% blocks executed 89%
        5: 1197:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1198:{
        -: 1199:
        -: 1200:  //if card is not trashed, added to Played pile
        5: 1201:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1202:    {
        -: 1203:      //add card to played pile
        5: 1204:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        5: 1205:      state->playedCardCount++;
        -: 1206:    }
        -: 1207:
        -: 1208:  //set played card to -1
        5: 1209:  state->hand[currentPlayer][handPos] = -1;
        -: 1210:
        -: 1211:  //remove card from player's hand
        5: 1212:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -: 1213:    {
        -: 1214:      //reduce number of cards in hand
        1: 1215:      state->handCount[currentPlayer]--;
        -: 1216:    }
        4: 1217:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1218:    {
        -: 1219:      //reduce number of cards in hand
    #####: 1220:      state->handCount[currentPlayer]--;
        -: 1221:    }
        -: 1222:  else
        -: 1223:    {
        -: 1224:      //replace discarded card with last card in hand
        4: 1225:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1226:      //set last card to -1
        4: 1227:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1228:      //reduce number of cards in hand
        4: 1229:      state->handCount[currentPlayer]--;
        -: 1230:    }
        -: 1231:
        5: 1232:  return 0;
        -: 1233:}
        -: 1234:
function gainCard called 3 returned 100% blocks executed 70%
        3: 1235:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1236:{
        -: 1237:  //Note: supplyPos is enum of choosen card
        -: 1238:
        -: 1239:  //check if supply pile is empty (0) or card is not used in game (-1)
        3: 1240:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1241:    {
    #####: 1242:      return -1;
        -: 1243:    }
        -: 1244:
        -: 1245:  //added card for [whoseTurn] current player:
        -: 1246:  // toFlag = 0 : add to discard
        -: 1247:  // toFlag = 1 : add to deck
        -: 1248:  // toFlag = 2 : add to hand
        -: 1249:
        3: 1250:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1251:    {
    #####: 1252:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1253:      state->deckCount[player]++;
        -: 1254:    }
        3: 1255:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1256:    {
    #####: 1257:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1258:      state->handCount[player]++;
        -: 1259:    }
        -: 1260:  else
        -: 1261:    {
        3: 1262:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        3: 1263:      state->discardCount[player]++;
        -: 1264:    }
        -: 1265:
        -: 1266:  //decrease number in supply pile
        3: 1267:  state->supplyCount[supplyPos]--;
        -: 1268:
        3: 1269:  return 0;
        -: 1270:}
        -: 1271:
function updateCoins called 10 returned 100% blocks executed 82%
       10: 1272:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1273:{
        -: 1274:  int i;
        -: 1275:
        -: 1276:  //reset coin count
       10: 1277:  state->coins = 0;
        -: 1278:
        -: 1279:  //add coins for each Treasure card in player's hand
       60: 1280:  for (i = 0; i < state->handCount[player]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       50: 1281:      if (state->hand[player][i] == copper){
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       40: 1282:	       state->coins += 1;
        -: 1283:	    }
       10: 1284:      else if (state->hand[player][i] == silver){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1285:	       state->coins += 2;
        -: 1286:	    }
       10: 1287:      else if (state->hand[player][i] == gold){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1288:	       state->coins += 3;
        -: 1289:	    }
        -: 1290:    }
        -: 1291:
        -: 1292:  //add bonus
       10: 1293:  state->coins += bonus;
        -: 1294:
       10: 1295:  return 0;
        -: 1296:}
        -: 1297:
        -: 1298:
        -: 1299://end of dominion.c
