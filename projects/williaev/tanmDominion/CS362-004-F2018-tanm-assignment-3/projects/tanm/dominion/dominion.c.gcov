        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1633518 returned 100% blocks executed 100%
  1633518:    8:int compare(const void* a, const void* b) {
  1633518:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
   817658:   10:    return 1;
   815860:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
   362615:   12:    return -1;
   453245:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 10 returned 100% blocks executed 88%
       10:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       10:   44:  SelectStream(1);
call    0 returned 100%
       10:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
       10:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       10:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      110:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1100:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       10:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
       10:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       10:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
       10:   89:      state->supplyCount[estate] = 8;
       10:   90:      state->supplyCount[duchy] = 8;
       10:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       10:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       10:  102:  state->supplyCount[silver] = 40;
       10:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      210:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1650:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1550:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      100:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
       20:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       10:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       90:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      100:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1450:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       30:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       20:  140:      state->deckCount[i] = 0;
       80:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       60:  143:	  state->deck[i][j] = estate;
       60:  144:	  state->deckCount[i]++;
        -:  145:	}
      160:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      140:  148:	  state->deck[i][j] = copper;
      140:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       30:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       20:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       30:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       20:  166:      state->handCount[i] = 0;
       20:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      280:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      270:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       10:  182:  state->outpostPlayed = 0;
       10:  183:  state->phase = 0;
       10:  184:  state->numActions = 1;
       10:  185:  state->numBuys = 1;
       10:  186:  state->playedCardCount = 0;
       10:  187:  state->whoseTurn = 0;
       10:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       60:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       50:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       10:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       10:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 2474 returned 100% blocks executed 100%
     2474:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     2474:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     2474:  209:  if (state->deckCount[player] < 1)
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
     1528:  210:    return -1;
      946:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   235344:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   234398:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
   234398:  216:    newDeck[newDeckPos] = state->deck[player][card];
   234398:  217:    newDeckPos++;
 19794827:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 19560429:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   234398:  221:    state->deckCount[player]--;
        -:  222:  }
   235344:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   234398:  224:    state->deck[player][i] = newDeck[i];
   234398:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      946:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 4 returned 100% blocks executed 100%
        4:  311:int numHandCards(struct gameState *state) {
        4:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 3 returned 100% blocks executed 100%
        3:  320:int supplyCount(int card, struct gameState *state) {
        3:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 6 returned 100% blocks executed 100%
        6:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        6:  326:  int count = 0;
        -:  327:
       66:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  329:    {
       60:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  331:    }
        -:  332:
       66:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  334:    {
       60:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  336:    }
        -:  337:
       66:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  339:    {
       60:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  341:    }
        -:  342:
        6:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 60014 returned 100% blocks executed 100%
    60014:  346:int whoseTurn(struct gameState *state) {
    60014:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 812628 returned 100% blocks executed 100%
   812628:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   812628:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
   235226:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   234193:  534:      state->deck[player][i] = state->discard[player][i];
   234193:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     1033:  538:    state->deckCount[player] = state->discardCount[player];
     1033:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     1033:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
     1033:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     1033:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
     1033:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     1033:  559:    if (deckCounter == 0)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
      108:  560:      return -1;
        -:  561:
      925:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      925:  563:    state->deckCount[player]--;
      925:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   811595:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   811595:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   811595:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   811595:  576:    state->deckCount[player]--;
   811595:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
   812520:  579:  return 0;
        -:  580:}
        -:  581:
function getCost called 16 returned 100% blocks executed 20%
       16:  582:int getCost(int cardNumber)
        -:  583:{
       16:  584:  switch( cardNumber )
branch  0 taken 0%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 44%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 19%
branch 26 taken 0%
branch 27 taken 13%
        -:  585:    {
    #####:  586:    case curse:
    #####:  587:      return 0;
        4:  588:    case estate:
        4:  589:      return 2;
    #####:  590:    case duchy:
    #####:  591:      return 5;
    #####:  592:    case province:
    #####:  593:      return 8;
        7:  594:    case copper:
        7:  595:      return 0;
    #####:  596:    case silver:
    #####:  597:      return 3;
    #####:  598:    case gold:
    #####:  599:      return 6;
    #####:  600:    case adventurer:
    #####:  601:      return 6;
    #####:  602:    case council_room:
    #####:  603:      return 5;
    #####:  604:    case feast:
    #####:  605:      return 4;
    #####:  606:    case gardens:
    #####:  607:      return 4;
    #####:  608:    case mine:
    #####:  609:      return 5;
    #####:  610:    case remodel:
    #####:  611:      return 4;
    #####:  612:    case smithy:
    #####:  613:      return 4;
    #####:  614:    case village:
    #####:  615:      return 3;
    #####:  616:    case baron:
    #####:  617:      return 4;
    #####:  618:    case great_hall:
    #####:  619:      return 3;
    #####:  620:    case minion:
    #####:  621:      return 5;
    #####:  622:    case steward:
    #####:  623:      return 3;
    #####:  624:    case tribute:
    #####:  625:      return 5;
    #####:  626:    case ambassador:
    #####:  627:      return 3;
    #####:  628:    case cutpurse:
    #####:  629:      return 4;
    #####:  630:    case embargo:
    #####:  631:      return 2;
    #####:  632:    case outpost:
    #####:  633:      return 5;
    #####:  634:    case salvager:
    #####:  635:      return 4;
        3:  636:    case sea_hag:
        3:  637:      return 4;
    #####:  638:    case treasure_map:
    #####:  639:      return 4;
        -:  640:    }
        -:  641:
        2:  642:  return -1;
        -:  643:}
        -:  644:
function cardEffect called 60010 returned 100% blocks executed 19%
    60010:  645:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  646:{
        -:  647:
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    60010:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    60010:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    60010:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        -:  658:
    60010:  659:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    29983:  660:    nextPlayer = 0;
        -:  661:  }
        -:  662:
        -:  663:
        -:  664:  //uses switch to select card and perform actions
    60010:  665:  switch( card )
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 1%
branch  6 taken 33%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 33%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 1%
branch 19 taken 0%
branch 20 taken 0%
        -:  666:    {
    20001:  667:    case adventurer:
    20001:  668:      return play_adventurer(state, currentPlayer);
call    0 returned 100%
        -:  669:
    #####:  670:    case council_room:
    #####:  671:      return play_council_room(state, currentPlayer, handPos);
call    0 never executed
        -:  672:
    #####:  673:    case feast:
        -:  674:      //gain card with cost up to 5
        -:  675:      //Backup hand
    #####:  676:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  677:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  678:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  679:      }
        -:  680:      //Backup hand
        -:  681:
        -:  682:      //Update Coins for Buy
    #####:  683:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  684:      x = 1;//Condition to loop on
    #####:  685:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  686:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  687:	  if (DEBUG)
        -:  688:	    printf("None of that card left, sorry!\n");
        -:  689:
        -:  690:	  if (DEBUG){
        -:  691:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  692:	  }
        -:  693:	}
    #####:  694:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  695:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  696:
        -:  697:	  if (DEBUG){
        -:  698:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  699:	  }
        -:  700:	}
        -:  701:	else{
        -:  702:
        -:  703:	  if (DEBUG){
        -:  704:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  705:	  }
        -:  706:
    #####:  707:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  708:	  x = 0;//No more buying cards
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  712:	  }
        -:  713:
        -:  714:	}
        -:  715:      }
        -:  716:
        -:  717:      //Reset Hand
    #####:  718:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  719:	state->hand[currentPlayer][i] = temphand[i];
    #####:  720:	temphand[i] = -1;
        -:  721:      }
        -:  722:      //Reset Hand
        -:  723:
    #####:  724:      return 0;
        -:  725:
    #####:  726:    case gardens:
    #####:  727:      return -1;
        -:  728:
    #####:  729:    case mine:
    #####:  730:      return play_mine(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
        -:  731:
        6:  732:    case remodel:
        6:  733:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  734:
        6:  735:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        3:  736:	       return -1;
        -:  737:	    }
        -:  738:
        3:  739:      gainCard(choice2, state, 0, currentPlayer);
call    0 returned 100%
        -:  740:
        -:  741:      //discard card from hand
        3:  742:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  743:
        -:  744:      //discard trashed card
       3*:  745:      for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  746:	       if (state->hand[currentPlayer][i] == j){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  747:	          discardCard(i, currentPlayer, state, 0);
call    0 returned 100%
        2:  748:	           break;
        -:  749:	       }
        -:  750:	    }
        3:  751:      return 0;
        -:  752:
    20002:  753:    case smithy:
    20002:  754:      return play_smithy(state, currentPlayer, handPos);
call    0 returned 100%
        -:  755:
    #####:  756:    case village:
    #####:  757:      return play_village(state, currentPlayer, handPos);
call    0 never executed
        -:  758:
    #####:  759:    case baron:
    #####:  760:      state->numBuys++;//Increase buys by 1!
    #####:  761:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  762:	int p = 0;//Iterator for hand!
    #####:  763:	int card_not_discarded = 1;//Flag for discard set!
    #####:  764:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  765:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  766:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  767:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  768:	    state->discardCount[currentPlayer]++;
    #####:  769:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  770:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  771:	    }
    #####:  772:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  773:	    state->handCount[currentPlayer]--;
    #####:  774:	    card_not_discarded = 0;//Exit the loop
        -:  775:	  }
    #####:  776:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  777:	    if(DEBUG) {
        -:  778:	      printf("No estate cards in your hand, invalid choice\n");
        -:  779:	      printf("Must gain an estate if there are any\n");
        -:  780:	    }
    #####:  781:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  782:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  783:	      state->supplyCount[estate]--;//Decrement estates
    #####:  784:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  785:		isGameOver(state);
call    0 never executed
        -:  786:	      }
        -:  787:	    }
    #####:  788:	    card_not_discarded = 0;//Exit the loop
        -:  789:	  }
        -:  790:
        -:  791:	  else{
    #####:  792:	    p++;//Next card
        -:  793:	  }
        -:  794:	}
        -:  795:      }
        -:  796:
        -:  797:      else{
    #####:  798:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  799:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  800:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  801:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  802:	    isGameOver(state);
call    0 never executed
        -:  803:	  }
        -:  804:	}
        -:  805:      }
        -:  806:
        -:  807:
    #####:  808:      return 0;
        -:  809:
    #####:  810:    case great_hall:
        -:  811:      //+1 Card
    #####:  812:      drawCard(currentPlayer, state);
call    0 never executed
        -:  813:
        -:  814:      //+1 Actions
    #####:  815:      state->numActions++;
        -:  816:
        -:  817:      //discard card from hand
    #####:  818:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  819:      return 0;
        -:  820:
    #####:  821:    case minion:
        -:  822:      //+1 action
    #####:  823:      state->numActions++;
        -:  824:
        -:  825:      //discard card from hand
    #####:  826:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  827:
    #####:  828:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  829:	{
    #####:  830:	  state->coins = state->coins + 2;
        -:  831:	}
        -:  832:
    #####:  833:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  834:	{
        -:  835:	  //discard hand
    #####:  836:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  837:	    {
    #####:  838:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  839:	    }
        -:  840:
        -:  841:	  //draw 4
    #####:  842:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  843:	    {
    #####:  844:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  845:	    }
        -:  846:
        -:  847:	  //other players discard hand and redraw if hand size > 4
    #####:  848:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  849:	    {
    #####:  850:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  851:		{
    #####:  852:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  853:		    {
        -:  854:		      //discard hand
    #####:  855:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  856:			{
    #####:  857:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  858:			}
        -:  859:
        -:  860:		      //draw 4
    #####:  861:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  862:			{
    #####:  863:			  drawCard(i, state);
call    0 never executed
        -:  864:			}
        -:  865:		    }
        -:  866:		}
        -:  867:	    }
        -:  868:
        -:  869:	}
    #####:  870:      return 0;
        -:  871:
    #####:  872:    case steward:
    #####:  873:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  874:	{
        -:  875:	  //+2 cards
    #####:  876:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  877:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  878:	}
    #####:  879:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  880:	{
        -:  881:	  //+2 coins
    #####:  882:	  state->coins = state->coins + 2;
        -:  883:	}
        -:  884:      else
        -:  885:	{
        -:  886:	  //trash 2 cards in hand
    #####:  887:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  888:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  889:	}
        -:  890:
        -:  891:      //discard card from hand
    #####:  892:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  893:      return 0;
        -:  894:
    #####:  895:    case tribute:
    #####:  896:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  897:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  898:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  899:	  state->deckCount[nextPlayer]--;
        -:  900:	}
    #####:  901:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  902:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  903:	  state->discardCount[nextPlayer]--;
        -:  904:	}
        -:  905:	else{
        -:  906:	  //No Card to Reveal
        -:  907:	  if (DEBUG){
        -:  908:	    printf("No cards to reveal\n");
        -:  909:	  }
        -:  910:	}
        -:  911:      }
        -:  912:
        -:  913:      else{
    #####:  914:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  915:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  916:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  917:	    state->deckCount[nextPlayer]++;
    #####:  918:	    state->discard[nextPlayer][i] = -1;
    #####:  919:	    state->discardCount[nextPlayer]--;
        -:  920:	  }
        -:  921:
    #####:  922:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  923:	}
    #####:  924:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  925:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  926:	state->deckCount[nextPlayer]--;
    #####:  927:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  928:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  929:	state->deckCount[nextPlayer]--;
        -:  930:      }
        -:  931:
    #####:  932:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  933:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  934:	state->playedCardCount++;
    #####:  935:	tributeRevealedCards[1] = -1;
        -:  936:      }
        -:  937:
    #####:  938:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  939:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  940:	  state->coins += 2;
        -:  941:	}
        -:  942:
    #####:  943:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  944:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  945:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  946:	}
        -:  947:	else{//Action Card
    #####:  948:	  state->numActions = state->numActions + 2;
        -:  949:	}
        -:  950:      }
        -:  951:
    #####:  952:      return 0;
        -:  953:
    #####:  954:    case ambassador:
    #####:  955:      j = 0;		//used to check if player has enough cards to discard
        -:  956:
    #####:  957:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  958:	{
    #####:  959:	  return -1;
        -:  960:	}
        -:  961:
    #####:  962:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  return -1;
        -:  965:	}
        -:  966:
    #####:  967:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  968:	{
    #####:  969:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  970:	    {
    #####:  971:	      j++;
        -:  972:	    }
        -:  973:	}
    #####:  974:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  975:	{
    #####:  976:	  return -1;
        -:  977:	}
        -:  978:
        -:  979:      if (DEBUG)
        -:  980:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  981:
        -:  982:      //increase supply count for choosen card by amount being discarded
    #####:  983:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  984:
        -:  985:      //each other player gains a copy of revealed card
    #####:  986:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  987:	{
    #####:  988:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  989:	    {
    #####:  990:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  991:	    }
        -:  992:	}
        -:  993:
        -:  994:      //discard played card from hand
    #####:  995:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  996:
        -:  997:      //trash copies of cards returned to supply
    #####:  998:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  999:	{
    #####: 1000:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1001:	    {
    #####: 1002:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1003:		{
    #####: 1004:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1005:		  break;
        -: 1006:		}
        -: 1007:	    }
        -: 1008:	}
        -: 1009:
    #####: 1010:      return 0;
        -: 1011:
    20000: 1012:    case cutpurse:
        -: 1013:
    20000: 1014:      updateCoins(currentPlayer, state, 2);
call    0 returned 100%
    60000: 1015:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1016:	{
    40000: 1017:	  if (i != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1018:	    {
   495837: 1019:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1020:		{
   494757: 1021:		  if (state->hand[i][j] == copper)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1022:		    {
    18920: 1023:		      discardCard(j, i, state, 0);
call    0 returned 100%
    18920: 1024:		      break;
        -: 1025:		    }
   475837: 1026:		  if (j == state->handCount[i])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1027:		    {
    #####: 1028:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1029:			{
        -: 1030:			  if (DEBUG)
        -: 1031:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1032:			}
    #####: 1033:		      break;
        -: 1034:		    }
        -: 1035:		}
        -: 1036:
        -: 1037:	    }
        -: 1038:
        -: 1039:	}
        -: 1040:
        -: 1041:      //discard played card from hand
    20000: 1042:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1043:
    20000: 1044:      return 0;
        -: 1045:
        -: 1046:
    #####: 1047:    case embargo:
        -: 1048:      //+2 Coins
    #####: 1049:      state->coins = state->coins + 2;
        -: 1050:
        -: 1051:      //see if selected pile is in play
    #####: 1052:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1053:	{
    #####: 1054:	  return -1;
        -: 1055:	}
        -: 1056:
        -: 1057:      //add embargo token to selected supply pile
    #####: 1058:      state->embargoTokens[choice1]++;
        -: 1059:
        -: 1060:      //trash card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1062:      return 0;
        -: 1063:
    #####: 1064:    case outpost:
        -: 1065:      //set outpost flag
    #####: 1066:      state->outpostPlayed++;
        -: 1067:
        -: 1068:      //discard card
    #####: 1069:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1070:      return 0;
        -: 1071:
    #####: 1072:    case salvager:
        -: 1073:      //+1 buy
    #####: 1074:      state->numBuys++;
        -: 1075:
    #####: 1076:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
        -: 1078:	  //gain coins equal to trashed card
    #####: 1079:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1080:	  //trash card
    #####: 1081:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1082:	}
        -: 1083:
        -: 1084:      //discard card
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1086:      return 0;
        -: 1087:
        1: 1088:    case sea_hag:
        3: 1089:      for (i = 0; i < state->numPlayers; i++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2: 1090:      	if (i != currentPlayer){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1: 1091:      	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        1: 1092:          state->deckCount[i]--;
        1: 1093:      	  state->discardCount[i]++;
        1: 1094:      	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1095:      	}
        -: 1096:      }
        1: 1097:      return 0;
        -: 1098:
    #####: 1099:    case treasure_map:
        -: 1100:      //search hand for another treasure_map
    #####: 1101:      index = -1;
    #####: 1102:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1103:	{
    #####: 1104:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1105:	    {
    #####: 1106:	      index = i;
    #####: 1107:	      break;
        -: 1108:	    }
        -: 1109:	}
    #####: 1110:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
        -: 1112:	  //trash both treasure cards
    #####: 1113:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1114:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1115:
        -: 1116:	  //gain 4 Gold cards
    #####: 1117:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1118:	    {
    #####: 1119:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1120:	    }
        -: 1121:
        -: 1122:	  //return success
    #####: 1123:	  return 1;
        -: 1124:	}
        -: 1125:
        -: 1126:      //no second treasure_map found in hand
    #####: 1127:      return -1;
        -: 1128:    }
        -: 1129:
    #####: 1130:  return -1;
        -: 1131:}
        -: 1132:
function discardCard called 78928 returned 100% blocks executed 89%
    78928: 1133:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1134:{
        -: 1135:
        -: 1136:  //if card is not trashed, added to Played pile
    78928: 1137:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1138:    {
        -: 1139:      //add card to played pile
    78928: 1140:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    78928: 1141:      state->playedCardCount++;
        -: 1142:    }
        -: 1143:  //set played card to -1
    78928: 1144:  state->hand[currentPlayer][handPos] = -1;
        -: 1145:
        -: 1146:  //remove card from player's hand
    78928: 1147:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1148:    {
        -: 1149:      //reduce number of cards in hand
      302: 1150:      state->handCount[currentPlayer]--;
        -: 1151:    }
    78626: 1152:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1153:    {
        -: 1154:      //reduce number of cards in hand
    #####: 1155:      state->handCount[currentPlayer]--;
        -: 1156:    }
        -: 1157:  else
        -: 1158:    {
        -: 1159:      //replace discarded card with last card in hand
    78626: 1160:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1161:      //set last card to -1
    78626: 1162:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1163:      //reduce number of cards in hand
    78626: 1164:      state->handCount[currentPlayer]--;
        -: 1165:    }
    78928: 1166:  return 0;
        -: 1167:}
        -: 1168:
function gainCard called 3 returned 100% blocks executed 70%
        3: 1169:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1170:{
        -: 1171:  //Note: supplyPos is enum of choosen card
        -: 1172:
        -: 1173:  //check if supply pile is empty (0) or card is not used in game (-1)
        3: 1174:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1175:    {
    #####: 1176:      return -1;
        -: 1177:    }
        -: 1178:
        -: 1179:  //added card for [whoseTurn] current player:
        -: 1180:  // toFlag = 0 : add to discard
        -: 1181:  // toFlag = 1 : add to deck
        -: 1182:  // toFlag = 2 : add to hand
        -: 1183:
        3: 1184:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1185:    {
    #####: 1186:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1187:      state->deckCount[player]++;
        -: 1188:    }
        3: 1189:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1190:    {
    #####: 1191:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1192:      state->handCount[player]++;
        -: 1193:    }
        -: 1194:  else
        -: 1195:    {
        3: 1196:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        3: 1197:      state->discardCount[player]++;
        -: 1198:    }
        -: 1199:
        -: 1200:  //decrease number in supply pile
        3: 1201:  state->supplyCount[supplyPos]--;
        -: 1202:
        3: 1203:  return 0;
        -: 1204:}
        -: 1205:
function updateCoins called 20010 returned 100% blocks executed 100%
    20010: 1206:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1207:{
        -: 1208:  int i;
        -: 1209:
        -: 1210:  //reset coin count
    20010: 1211:  state->coins = 0;
        -: 1212:
        -: 1213:  //add coins for each Treasure card in player's hand
  5028058: 1214:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1215:    {
  5008048: 1216:      if (state->hand[player][i] == copper)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1217:	{
   192258: 1218:	  state->coins += 1;
        -: 1219:	}
  4815790: 1220:      else if (state->hand[player][i] == silver)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1221:	{
   191261: 1222:	  state->coins += 2;
        -: 1223:	}
  4624529: 1224:      else if (state->hand[player][i] == gold)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1225:	{
   191811: 1226:	  state->coins += 3;
        -: 1227:	}
        -: 1228:    }
        -: 1229:
        -: 1230:  //add bonus
    20010: 1231:  state->coins += bonus;
        -: 1232:
    20010: 1233:  return 0;
        -: 1234:}
        -: 1235:
        -: 1236:// adventurer
        -: 1237:
function play_adventurer called 20001 returned 100% blocks executed 100%
    20001: 1238:int play_adventurer(struct gameState* state, int currentPlayer){
        -: 1239:
        -: 1240:  // BUG
    20001: 1241:  int drawntreasure = 0;  //fixed by initializing to zero.
        -: 1242:  int cardDrawn;
        -: 1243:  int temphand[MAX_HAND];// moved above the if statement
    20001: 1244:  int temphandIdx = 0;
        -: 1245:
        -: 1246:  // BUG
   366588: 1247:  while(drawntreasure < 2){  //fixed by changing 3 to 2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
   346587: 1248:      if(state->deckCount[currentPlayer] < 1){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      710: 1249:        shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1250:      }
   346587: 1251:      drawCard(currentPlayer, state);
call    0 returned 100%
   346587: 1252:      cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   346587: 1253:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
    40002: 1254:        drawntreasure++;
        -: 1255:      }
        -: 1256:      else{
   306585: 1257:        temphand[temphandIdx]=cardDrawn;
   306585: 1258:        state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   306585: 1259:        temphandIdx++;
        -: 1260:      }
        -: 1261:  }
   326586: 1262:  while(temphandIdx > 0){
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
   306585: 1263:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[temphandIdx-1]; // discard all cards in play that have been drawn
   306585: 1264:    temphandIdx--;
        -: 1265:  }
    20001: 1266:    return 0;
        -: 1267:}
        -: 1268:
        -: 1269:// smithy
function play_smithy called 20002 returned 100% blocks executed 100%
    20002: 1270:int play_smithy(struct gameState* state, int currentPlayer, int handPos){
        -: 1271:  //+3 Cards
        -: 1272:  int i;
    80008: 1273:  for (i = 0; i < 3; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
    60006: 1274:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1275:  }
        -: 1276:  //discard card from hand
        -: 1277:  // BUG
    20002: 1278:  discardCard(handPos, currentPlayer, state, 0); //Corrected code
call    0 returned 100%
        -: 1279:  //discardCard(currentPlayer, handPos, state, 0);  //bug
    20002: 1280:  return 0;
        -: 1281:}
        -: 1282:
        -: 1283:
        -: 1284:// council_room
function play_council_room called 0 returned 0% blocks executed 0%
    #####: 1285:int play_council_room(struct gameState* state, int currentPlayer, int handPos){
        -: 1286:
        -: 1287:  //+4 Cards
        -: 1288:  int i;
    #####: 1289:  for (i = 0; i < 4; i++){
branch  0 never executed
branch  1 never executed
    #####: 1290:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1291:  }
        -: 1292:
        -: 1293:  //+1 Buy
        -: 1294:  // BUG
        -: 1295:// state->numBuys++;
        -: 1296:
        -: 1297:  //Each other player draws a card
    #####: 1298:  for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1299:    if ( i != currentPlayer ){
branch  0 never executed
branch  1 never executed
    #####: 1300:      drawCard(i, state);
call    0 never executed
        -: 1301:    }
        -: 1302:  }
        -: 1303:
        -: 1304:  //put played card in played card pile
    #####: 1305:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1306:  return 0;
        -: 1307:}
        -: 1308:
        -: 1309:
        -: 1310:// village
function play_village called 0 returned 0% blocks executed 0%
    #####: 1311:int play_village(struct gameState* state, int currentPlayer, int handPos){
        -: 1312:  //+1 Card
    #####: 1313:  drawCard(currentPlayer, state);
call    0 never executed
        -: 1314:
        -: 1315:  //+2 Actions
    #####: 1316:  state->numActions = state->numActions + 2;
        -: 1317:
        -: 1318:  //discard played card from hand
    #####: 1319:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1320:  return 0;
        -: 1321:}
        -: 1322:
        -: 1323:
        -: 1324:// mine
        -: 1325:
function play_mine called 0 returned 0% blocks executed 0%
    #####: 1326:int play_mine(struct gameState* state, int currentPlayer, int choice1, int choice2, int handPos){
    #####: 1327:  int trashedCard = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1328:
    #####: 1329:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1330:   // BUG
    #####: 1331:    return 1;
        -: 1332:  }
        -: 1333:
    #####: 1334:  if (choice2 > treasure_map || choice2 < curse){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1335:  // BUG
    #####: 1336:    return 1;
        -: 1337:  }
        -: 1338: // BUG
    #####: 1339:  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice1) ){
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1340:  // BUG
    #####: 1341:    return 1;
        -: 1342:  }
        -: 1343:
    #####: 1344:  gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1345:
        -: 1346:  //discard card from hand
    #####: 1347:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1348:
        -: 1349:  //discard trashed card
        -: 1350:  int i;
    #####: 1351:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1352:    if (state->hand[currentPlayer][i] == trashedCard){
branch  0 never executed
branch  1 never executed
    #####: 1353:      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1354:      break;
        -: 1355:    }
        -: 1356:  }
        -: 1357:
    #####: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362:
        -: 1363://end of dominion.c
